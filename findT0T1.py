#from sorting4rings import find_intersection_of_line_with_cubics_outward_pointing_normal_line_bundle, find_intersection_of_rectangle_with_paths_outward_pointing_normal_line_bundle
#from time import sleep
######Test
#from svg.path import parse_path, Path, Line
#from misc4rings import dis
#line = parse_path("m 205.71429,332.36218 368.57142,0")[0]
#cub = parse_path("m 205.71429,666.6479 c 88.49478,-4.31661 179.11581,108.27167 320,0")[0]
#mini,maxi = find_intersection_of_line_with_cubics_outward_pointing_normal_line_bundle(cub,line)
#nLmin = Line(cub.point(mini[0]),line.point(mini[1]))
#nLmax = Line(cub.point(maxi[0]),line.point(maxi[1]))
#dis([Path(line),Path(cub)],lines=[nLmin,nLmax])
#sleep(2)
######Test2
#rectangular_path = parse_path("m 100,749.50504 0,-480 525.71429,0 0,477.14286 -525.71429,0 z")
#path = parse_path("m 288.57143,600.93361 c -52.15994,-28.20816 -42.8879,-61.33087 0,-97.14286 61.70241,-47.87528 117.27451,-31.38233 171.42857,0 44.99851,48.39249 11.69762,77.21012 0,111.42858")
#mini,maxi = find_intersection_of_rectangle_with_paths_outward_pointing_normal_line_bundle(path,rectangular_path)
#nLmin = Line(path.point(mini[0]),rectangular_path.point(mini[1]))
#nLmax = Line(path.point(maxi[0]),rectangular_path.point(maxi[1]))
#dis([path,rectangular_path],lines=[nLmin,nLmax])

from numpy import roots, isclose
from operator import itemgetter
from svgpathtools import Path
from misc4rings import normalLineAtT_toInner_intersects_withOuter
from __future__ import division #forces floating point division (use // for int division)

class tau_func(object):
    def __init__(self,t1,a0,a1,a2,a3,b0,b1,b2,b3):
        self.points =  (a0,a1,a2,a3,b0,b1,b2,b3)
        self.t1 = t1
        self.tau_n0 = (b0**2 - 6*b0*b1 + 9*b1**2 + 6*(b0 - 3*b1)*b2 + 9*b2**2 - 2*(b0 - 3*b1 + 3*b2)*b3 + b3**2)*t1**4 - 5*(b0**2 - 5*b0*b1 + 6*b1**2 + (4*b0 - 9*b1)*b2 + 3*b2**2 - (b0 - 2*b1 + b2)*b3)*t1**3 - ((a0 - 3*a1 + 3*a2 - a3)*b0 - 10*b0**2 - (a0 - 3*a1 + 3*a2 - a3 - 40*b0)*b1 - 36*b1**2 - 12*(2*b0 - 3*b1)*b2 - 6*b2**2 + 4*(b0 - b1)*b3)*t1**2 - 3*(a0 - a1)*b0 + 3*b0**2 + 3*(a0 - a1 - 2*b0)*b1 + 3*b1**2 + 3*((a0 - 2*a1 + a2)*b0 - 3*b0**2 - (a0 - 2*a1 + a2 - 9*b0)*b1 - 6*b1**2 - 3*(b0 - b1)*b2)*t1
        self.tau_n1 = (b0**2 - 6*b0*b1 + 9*b1**2 + 6*(b0 - 3*b1)*b2 + 9*b2**2 - 2*(b0 - 3*b1 + 3*b2)*b3 + b3**2)*t1**3 + (2*(a0 - 3*a1 + 3*a2 - a3)*b0 - 5*b0**2 - (4*a0 - 12*a1 + 12*a2 - 4*a3 - 25*b0)*b1 - 30*b1**2 + (2*a0 - 6*a1 + 6*a2 - 2*a3 - 20*b0 + 45*b1)*b2 - 15*b2**2 + 5*(b0 - 2*b1 + b2)*b3)*t1**2 + 3*(3*a0 - 4*a1 + a2)*b0 - 3*b0**2 - 3*(5*a0 - 6*a1 + a2 - 3*b0)*b1 - 6*b1**2 + 3*(2*a0 - 2*a1 - b0 + b1)*b2 - ((7*a0 - 15*a1 + 9*a2 - a3)*b0 - 7*b0**2 - (13*a0 - 27*a1 + 15*a2 - a3 - 28*b0)*b1 - 27*b1**2 + 3*(2*a0 - 4*a1 + 2*a2 - 5*b0 + 9*b1)*b2 - 6*b2**2 + (b0 - b1)*b3)*t1
        self.tau_n2 =-((a0 - 3*a1 + 3*a2 - a3)*b0 - b0**2 - 3*(a0 - 3*a1 + 3*a2 - a3 - 2*b0)*b1 - 9*b1**2 + 3*(a0 - 3*a1 + 3*a2 - a3 - 2*b0 + 6*b1)*b2 - 9*b2**2 - (a0 - 3*a1 + 3*a2 - a3 - 2*b0 + 6*b1 - 6*b2)*b3 - b3**2)*t1**2 - (10*a0 - 18*a1 + 9*a2 - a3)*b0 + b0**2 + (22*a0 - 36*a1 + 15*a2 - a3 - 4*b0)*b1 + 3*b1**2 - 3*(5*a0 - 7*a1 + 2*a2 - b0 + b1)*b2 + (3*a0 - 3*a1 - b0 + b1)*b3 + ((5*a0 - 12*a1 + 9*a2 - 2*a3)*b0 - 2*b0**2 - (13*a0 - 30*a1 + 21*a2 - 4*a3 - 10*b0)*b1 - 12*b1**2 + (11*a0 - 24*a1 + 15*a2 - 2*a3 - 8*b0 + 18*b1)*b2 - 6*b2**2 - (3*a0 - 6*a1 + 3*a2 - 2*b0 + 4*b1 - 2*b2)*b3)*t1
        self.tau_n3 =(5*a0 - 12*a1 + 9*a2 - 2*a3)*b0 - (13*a0 - 30*a1 + 21*a2 - 4*a3)*b1 + (11*a0 - 24*a1 + 15*a2 - 2*a3)*b2 - 3*(a0 - 2*a1 + a2)*b3 - ((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t1
        self.tau_n4 =-(a0 - 3*a1 + 3*a2 - a3)*b0 + 3*(a0 - 3*a1 + 3*a2 - a3)*b1 - 3*(a0 - 3*a1 + 3*a2 - a3)*b2 + (a0 - 3*a1 + 3*a2 - a3)*b3
        self.tau_d0 =6*(a1 - a2)*b0 - 6*(a0 - a2)*b1 + 6*(a0 - a1)*b2 - 3*((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3)*t1
        self.tau_d1 =-3*(2*a1 - 3*a2 + a3)*b0 + 3*(2*a0 - 3*a2 + a3)*b1 - 9*(a0 - a1)*b2 + 3*(a0 - a1)*b3 + 6*((a1 - 2*a2 + a3)*b0 - (a0 - 3*a2 + 2*a3)*b1 + (2*a0 - 3*a1 + a3)*b2 - (a0 - 2*a1 + a2)*b3)*t1
    def eval(self,t):
        numer = (self.tau_n4*t**4 + self.tau_n3*t**3 + self.tau_n2*t**2 + self.tau_n1*t + self.tau_n0)
        denom = self.tau_d1*t + self.tau_d0
        if denom:
            return numer/denom
        else:
            return False
class s_func(object):
    def __init__(self,t1,a0,a1,a2,a3,b0,b1,b2,b3):
        self.points =  (a0,a1,a2,a3,b0,b1,b2,b3)
        self.t1 = t1
        self.s_n0 =-((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t1^4 + ((5*a0 - 13*a1 + 11*a2 - 3*a3)*b0 - 6*(2*a0 - 5*a1 + 4*a2 - a3)*b1 + 3*(3*a0 - 7*a1 + 5*a2 - a3)*b2 - 2*(a0 - 2*a1 + a2)*b3)*t1^3 + (a0^2 - 4*a0*a1 + 3*a1^2 + 3*(a0 - a1)*a2 - (a0 - a1)*a3 - (10*a0 - 22*a1 + 15*a2 - 3*a3)*b0 + 3*(6*a0 - 12*a1 + 7*a2 - a3)*b1 - 3*(3*a0 - 5*a1 + 2*a2)*b2 + (a0 - a1)*b3)*t1^2 + 3*a0^2 - 6*a0*a1 + 3*a1^2 - 3*(a0 - a1)*b0 + 3*(a0 - a1)*b1 - 3*(a0^2 - 3*a0*a1 + 2*a1^2 + (a0 - a1)*a2 - (3*a0 - 5*a1 + 2*a2)*b0 + 2*(2*a0 - 3*a1 + a2)*b1 - (a0 - a1)*b2)*t1
        self.s_n1 =-((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t1^3 - (2*a0^2 - 10*a0*a1 + 12*a1^2 + 2*(4*a0 - 9*a1)*a2 + 6*a2^2 - 2*(a0 - 2*a1 + a2)*a3 - (5*a0 - 13*a1 + 11*a2 - 3*a3)*b0 + 6*(2*a0 - 5*a1 + 4*a2 - a3)*b1 - 3*(3*a0 - 7*a1 + 5*a2 - a3)*b2 + 2*(a0 - 2*a1 + a2)*b3)*t1^2 - 9*a0^2 + 27*a0*a1 - 18*a1^2 - 9*(a0 - a1)*a2 + 3*(a0 - a1)*b0 - 6*(a0 - a1)*b1 + 3*(a0 - a1)*b2 + (7*a0^2 - 28*a0*a1 + 27*a1^2 + 3*(5*a0 - 9*a1)*a2 + 6*a2^2 - (a0 - a1)*a3 - (7*a0 - 13*a1 + 6*a2)*b0 + 3*(5*a0 - 9*a1 + 4*a2)*b1 - 3*(3*a0 - 5*a1 + 2*a2)*b2 + (a0 - a1)*b3)*t1
        self.s_n2 =(a0^2 - 6*a0*a1 + 9*a1^2 + 6*(a0 - 3*a1)*a2 + 9*a2^2 - 2*(a0 - 3*a1 + 3*a2)*a3 + a3^2 - (a0 - 3*a1 + 3*a2 - a3)*b0 + 3*(a0 - 3*a1 + 3*a2 - a3)*b1 - 3*(a0 - 3*a1 + 3*a2 - a3)*b2 + (a0 - 3*a1 + 3*a2 - a3)*b3)*t1^2 + 10*a0^2 - 40*a0*a1 + 36*a1^2 + 12*(2*a0 - 3*a1)*a2 + 6*a2^2 - 4*(a0 - a1)*a3 - (a0 - a1)*b0 + 3*(a0 - a1)*b1 - 3*(a0 - a1)*b2 + (a0 - a1)*b3 - (5*a0^2 - 25*a0*a1 + 30*a1^2 + 5*(4*a0 - 9*a1)*a2 + 15*a2^2 - 5*(a0 - 2*a1 + a2)*a3 - 2*(a0 - 2*a1 + a2)*b0 + 6*(a0 - 2*a1 + a2)*b1 - 6*(a0 - 2*a1 + a2)*b2 + 2*(a0 - 2*a1 + a2)*b3)*t1
        self.s_n3 =-5*a0^2 + 25*a0*a1 - 30*a1^2 - 5*(4*a0 - 9*a1)*a2 - 15*a2^2 + 5*(a0 - 2*a1 + a2)*a3 + (a0^2 - 6*a0*a1 + 9*a1^2 + 6*(a0 - 3*a1)*a2 + 9*a2^2 - 2*(a0 - 3*a1 + 3*a2)*a3 + a3^2)*t1
        self.s_n4 =a0^2 - 6*a0*a1 + 9*a1^2 + 6*(a0 - 3*a1)*a2 + 9*a2^2 - 2*(a0 - 3*a1 + 3*a2)*a3 + a3^2
        self.s_d0 =6*(a1 - a2)*b0 - 6*(a0 - a2)*b1 + 6*(a0 - a1)*b2 - 3*((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3)*t1
        self.s_d1 =-3*(2*a1 - 3*a2 + a3)*b0 + 3*(2*a0 - 3*a2 + a3)*b1 - 9*(a0 - a1)*b2 + 3*(a0 - a1)*b3 + 6*((a1 - 2*a2 + a3)*b0 - (a0 - 3*a2 + 2*a3)*b1 + (2*a0 - 3*a1 + a3)*b2 - (a0 - 2*a1 + a2)*b3)*t1
    def eval(self,t):
        numer = (self.s_n4*t**4 + self.s_n3*t**3 + self.s_n2*t**2 + self.s_n1*t + self.s_n0)
        denom = self.s_d1*t + self.s_d0
        if denom:
            return numer/denom
        else:
            return False

def tau_eval(t,t1,a0,a1,a2,a3,b0,b1,b2,b3):
    return -1/3*(((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t**4 - (b0**2 - 6*b0*b1 + 9*b1**2 + 6*(b0 - 3*b1)*b2 + 9*b2**2 - 2*(b0 - 3*b1 + 3*b2)*b3 + b3**2)*t1**4 - ((5*a0 - 12*a1 + 9*a2 - 2*a3)*b0 - (13*a0 - 30*a1 + 21*a2 - 4*a3)*b1 + (11*a0 - 24*a1 + 15*a2 - 2*a3)*b2 - 3*(a0 - 2*a1 + a2)*b3)*t**3 + (5*b0**2 - 25*b0*b1 + 30*b1**2 + 5*(4*b0 - 9*b1)*b2 + 15*b2**2 - 5*(b0 - 2*b1 + b2)*b3 - (b0**2 - 6*b0*b1 + 9*b1**2 + 6*(b0 - 3*b1)*b2 + 9*b2**2 - 2*(b0 - 3*b1 + 3*b2)*b3 + b3**2)*t)*t1**3 + ((10*a0 - 18*a1 + 9*a2 - a3)*b0 - b0**2 - (22*a0 - 36*a1 + 15*a2 - a3 - 4*b0)*b1 - 3*b1**2 + 3*(5*a0 - 7*a1 + 2*a2 - b0 + b1)*b2 - (3*a0 - 3*a1 - b0 + b1)*b3)*t**2 + (((a0 - 3*a1 + 3*a2 - a3)*b0 - b0**2 - 3*(a0 - 3*a1 + 3*a2 - a3 - 2*b0)*b1 - 9*b1**2 + 3*(a0 - 3*a1 + 3*a2 - a3 - 2*b0 + 6*b1)*b2 - 9*b2**2 - (a0 - 3*a1 + 3*a2 - a3 - 2*b0 + 6*b1 - 6*b2)*b3 - b3**2)*t**2 + (a0 - 3*a1 + 3*a2 - a3)*b0 - 10*b0**2 - (a0 - 3*a1 + 3*a2 - a3 - 40*b0)*b1 - 36*b1**2 - 12*(2*b0 - 3*b1)*b2 - 6*b2**2 + 4*(b0 - b1)*b3 - (2*(a0 - 3*a1 + 3*a2 - a3)*b0 - 5*b0**2 - (4*a0 - 12*a1 + 12*a2 - 4*a3 - 25*b0)*b1 - 30*b1**2 + (2*a0 - 6*a1 + 6*a2 - 2*a3 - 20*b0 + 45*b1)*b2 - 15*b2**2 + 5*(b0 - 2*b1 + b2)*b3)*t)*t1**2 + 3*(a0 - a1)*b0 - 3*b0**2 - 3*(a0 - a1 - 2*b0)*b1 - 3*b1**2 - 3*((3*a0 - 4*a1 + a2)*b0 - b0**2 - (5*a0 - 6*a1 + a2 - 3*b0)*b1 - 2*b1**2 + (2*a0 - 2*a1 - b0 + b1)*b2)*t + (((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t**3 - ((5*a0 - 12*a1 + 9*a2 - 2*a3)*b0 - 2*b0**2 - (13*a0 - 30*a1 + 21*a2 - 4*a3 - 10*b0)*b1 - 12*b1**2 + (11*a0 - 24*a1 + 15*a2 - 2*a3 - 8*b0 + 18*b1)*b2 - 6*b2**2 - (3*a0 - 6*a1 + 3*a2 - 2*b0 + 4*b1 - 2*b2)*b3)*t**2 - 3*(a0 - 2*a1 + a2)*b0 + 9*b0**2 + 3*(a0 - 2*a1 + a2 - 9*b0)*b1 + 18*b1**2 + 9*(b0 - b1)*b2 + ((7*a0 - 15*a1 + 9*a2 - a3)*b0 - 7*b0**2 - (13*a0 - 27*a1 + 15*a2 - a3 - 28*b0)*b1 - 27*b1**2 + 3*(2*a0 - 4*a1 + 2*a2 - 5*b0 + 9*b1)*b2 - 6*b2**2 + (b0 - b1)*b3)*t)*t1)/(2*(a1 - a2)*b0 - 2*(a0 - a2)*b1 + 2*(a0 - a1)*b2 - ((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3)*t - ((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3 - 2*((a1 - 2*a2 + a3)*b0 - (a0 - 3*a2 + 2*a3)*b1 + (2*a0 - 3*a1 + a3)*b2 - (a0 - 2*a1 + a2)*b3)*t)*t1)
def s_eval(t,t1,a0,a1,a2,a3,b0,b1,b2,b3):
    return 1/3*((a0**2 - 6*a0*a1 + 9*a1**2 + 6*(a0 - 3*a1)*a2 + 9*a2**2 - 2*(a0 - 3*a1 + 3*a2)*a3 + a3**2)*t**4 - ((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t1**4 - 5*(a0**2 - 5*a0*a1 + 6*a1**2 + (4*a0 - 9*a1)*a2 + 3*a2**2 - (a0 - 2*a1 + a2)*a3)*t**3 + ((5*a0 - 13*a1 + 11*a2 - 3*a3)*b0 - 6*(2*a0 - 5*a1 + 4*a2 - a3)*b1 + 3*(3*a0 - 7*a1 + 5*a2 - a3)*b2 - 2*(a0 - 2*a1 + a2)*b3 - ((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t)*t1**3 + (10*a0**2 - 40*a0*a1 + 36*a1**2 + 12*(2*a0 - 3*a1)*a2 + 6*a2**2 - 4*(a0 - a1)*a3 - (a0 - a1)*b0 + 3*(a0 - a1)*b1 - 3*(a0 - a1)*b2 + (a0 - a1)*b3)*t**2 + ((a0**2 - 6*a0*a1 + 9*a1**2 + 6*(a0 - 3*a1)*a2 + 9*a2**2 - 2*(a0 - 3*a1 + 3*a2)*a3 + a3**2 - (a0 - 3*a1 + 3*a2 - a3)*b0 + 3*(a0 - 3*a1 + 3*a2 - a3)*b1 - 3*(a0 - 3*a1 + 3*a2 - a3)*b2 + (a0 - 3*a1 + 3*a2 - a3)*b3)*t**2 + a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2 - (a0 - a1)*a3 - (10*a0 - 22*a1 + 15*a2 - 3*a3)*b0 + 3*(6*a0 - 12*a1 + 7*a2 - a3)*b1 - 3*(3*a0 - 5*a1 + 2*a2)*b2 + (a0 - a1)*b3 - (2*a0**2 - 10*a0*a1 + 12*a1**2 + 2*(4*a0 - 9*a1)*a2 + 6*a2**2 - 2*(a0 - 2*a1 + a2)*a3 - (5*a0 - 13*a1 + 11*a2 - 3*a3)*b0 + 6*(2*a0 - 5*a1 + 4*a2 - a3)*b1 - 3*(3*a0 - 7*a1 + 5*a2 - a3)*b2 + 2*(a0 - 2*a1 + a2)*b3)*t)*t1**2 + 3*a0**2 - 6*a0*a1 + 3*a1**2 - 3*(a0 - a1)*b0 + 3*(a0 - a1)*b1 - 3*(3*a0**2 - 9*a0*a1 + 6*a1**2 + 3*(a0 - a1)*a2 - (a0 - a1)*b0 + 2*(a0 - a1)*b1 - (a0 - a1)*b2)*t + ((a0**2 - 6*a0*a1 + 9*a1**2 + 6*(a0 - 3*a1)*a2 + 9*a2**2 - 2*(a0 - 3*a1 + 3*a2)*a3 + a3**2)*t**3 - (5*a0**2 - 25*a0*a1 + 30*a1**2 + 5*(4*a0 - 9*a1)*a2 + 15*a2**2 - 5*(a0 - 2*a1 + a2)*a3 - 2*(a0 - 2*a1 + a2)*b0 + 6*(a0 - 2*a1 + a2)*b1 - 6*(a0 - 2*a1 + a2)*b2 + 2*(a0 - 2*a1 + a2)*b3)*t**2 - 3*a0**2 + 9*a0*a1 - 6*a1**2 - 3*(a0 - a1)*a2 + 3*(3*a0 - 5*a1 + 2*a2)*b0 - 6*(2*a0 - 3*a1 + a2)*b1 + 3*(a0 - a1)*b2 + (7*a0**2 - 28*a0*a1 + 27*a1**2 + 3*(5*a0 - 9*a1)*a2 + 6*a2**2 - (a0 - a1)*a3 - (7*a0 - 13*a1 + 6*a2)*b0 + 3*(5*a0 - 9*a1 + 4*a2)*b1 - 3*(3*a0 - 5*a1 + 2*a2)*b2 + (a0 - a1)*b3)*t)*t1)/(2*(a1 - a2)*b0 - 2*(a0 - a2)*b1 + 2*(a0 - a1)*b2 - ((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3)*t - ((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3 - 2*((a1 - 2*a2 + a3)*b0 - (a0 - 3*a2 + 2*a3)*b1 + (2*a0 - 3*a1 + a3)*b2 - (a0 - 2*a1 + a2)*b3)*t)*t1)-1/3*(((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t**4 - (b0**2 - 6*b0*b1 + 9*b1**2 + 6*(b0 - 3*b1)*b2 + 9*b2**2 - 2*(b0 - 3*b1 + 3*b2)*b3 + b3**2)*t1**4 - ((5*a0 - 12*a1 + 9*a2 - 2*a3)*b0 - (13*a0 - 30*a1 + 21*a2 - 4*a3)*b1 + (11*a0 - 24*a1 + 15*a2 - 2*a3)*b2 - 3*(a0 - 2*a1 + a2)*b3)*t**3 + (5*b0**2 - 25*b0*b1 + 30*b1**2 + 5*(4*b0 - 9*b1)*b2 + 15*b2**2 - 5*(b0 - 2*b1 + b2)*b3 - (b0**2 - 6*b0*b1 + 9*b1**2 + 6*(b0 - 3*b1)*b2 + 9*b2**2 - 2*(b0 - 3*b1 + 3*b2)*b3 + b3**2)*t)*t1**3 + ((10*a0 - 18*a1 + 9*a2 - a3)*b0 - b0**2 - (22*a0 - 36*a1 + 15*a2 - a3 - 4*b0)*b1 - 3*b1**2 + 3*(5*a0 - 7*a1 + 2*a2 - b0 + b1)*b2 - (3*a0 - 3*a1 - b0 + b1)*b3)*t**2 + (((a0 - 3*a1 + 3*a2 - a3)*b0 - b0**2 - 3*(a0 - 3*a1 + 3*a2 - a3 - 2*b0)*b1 - 9*b1**2 + 3*(a0 - 3*a1 + 3*a2 - a3 - 2*b0 + 6*b1)*b2 - 9*b2**2 - (a0 - 3*a1 + 3*a2 - a3 - 2*b0 + 6*b1 - 6*b2)*b3 - b3**2)*t**2 + (a0 - 3*a1 + 3*a2 - a3)*b0 - 10*b0**2 - (a0 - 3*a1 + 3*a2 - a3 - 40*b0)*b1 - 36*b1**2 - 12*(2*b0 - 3*b1)*b2 - 6*b2**2 + 4*(b0 - b1)*b3 - (2*(a0 - 3*a1 + 3*a2 - a3)*b0 - 5*b0**2 - (4*a0 - 12*a1 + 12*a2 - 4*a3 - 25*b0)*b1 - 30*b1**2 + (2*a0 - 6*a1 + 6*a2 - 2*a3 - 20*b0 + 45*b1)*b2 - 15*b2**2 + 5*(b0 - 2*b1 + b2)*b3)*t)*t1**2 + 3*(a0 - a1)*b0 - 3*b0**2 - 3*(a0 - a1 - 2*b0)*b1 - 3*b1**2 - 3*((3*a0 - 4*a1 + a2)*b0 - b0**2 - (5*a0 - 6*a1 + a2 - 3*b0)*b1 - 2*b1**2 + (2*a0 - 2*a1 - b0 + b1)*b2)*t + (((a0 - 3*a1 + 3*a2 - a3)*b0 - 3*(a0 - 3*a1 + 3*a2 - a3)*b1 + 3*(a0 - 3*a1 + 3*a2 - a3)*b2 - (a0 - 3*a1 + 3*a2 - a3)*b3)*t**3 - ((5*a0 - 12*a1 + 9*a2 - 2*a3)*b0 - 2*b0**2 - (13*a0 - 30*a1 + 21*a2 - 4*a3 - 10*b0)*b1 - 12*b1**2 + (11*a0 - 24*a1 + 15*a2 - 2*a3 - 8*b0 + 18*b1)*b2 - 6*b2**2 - (3*a0 - 6*a1 + 3*a2 - 2*b0 + 4*b1 - 2*b2)*b3)*t**2 - 3*(a0 - 2*a1 + a2)*b0 + 9*b0**2 + 3*(a0 - 2*a1 + a2 - 9*b0)*b1 + 18*b1**2 + 9*(b0 - b1)*b2 + ((7*a0 - 15*a1 + 9*a2 - a3)*b0 - 7*b0**2 - (13*a0 - 27*a1 + 15*a2 - a3 - 28*b0)*b1 - 27*b1**2 + 3*(2*a0 - 4*a1 + 2*a2 - 5*b0 + 9*b1)*b2 - 6*b2**2 + (b0 - b1)*b3)*t)*t1)/(2*(a1 - a2)*b0 - 2*(a0 - a2)*b1 + 2*(a0 - a1)*b2 - ((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3)*t - ((2*a1 - 3*a2 + a3)*b0 - (2*a0 - 3*a2 + a3)*b1 + 3*(a0 - a1)*b2 - (a0 - a1)*b3 - 2*((a1 - 2*a2 + a3)*b0 - (a0 - 3*a2 + 2*a3)*b1 + (2*a0 - 3*a1 + a3)*b2 - (a0 - 2*a1 + a2)*b3)*t)*t1)

def argmin_of_s(t1,a0,a1,a2,a3,b0,b1,b2,b3):
    #set up rational function to find zeros of
    ds_n0 = 2*((a0*a1 - 3*a1**2 - (2*a0 - 9*a1)*a2 - 6*a2**2 + (a0 - 4*a1 + 5*a2)*a3 - a3**2)*b0**2 - (a0**2 - 9*a1**2 - 6*(a0 - 6*a1)*a2 - 27*a2**2 + 2*(2*a0 - 9*a1 + 12*a2)*a3 - 5*a3**2)*b0*b1 + 3*(a0**2 - 3*a0*a1 + 9*a1*a2 - 9*a2**2 + (a0 - 6*a1 + 9*a2)*a3 - 2*a3**2)*b1**2 + 3*(2*a0**2 - 9*a0*a1 + 9*a1**2 + 3*(2*a0 - 3*a1)*a2 - (a0 - 3*a2)*a3 - a3**2)*b2**2 + (a0**2 - 5*a0*a1 + 6*a1**2 + (4*a0 - 9*a1)*a2 + 3*a2**2 - (a0 - 2*a1 + a2)*a3)*b3**2 + (2*(a0**2 - 3*a0*a1 + 9*a1*a2 - 9*a2**2 + (a0 - 6*a1 + 9*a2)*a3 - 2*a3**2)*b0 - 9*(a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2 - 2*(a1 - 2*a2)*a3 - a3**2)*b1)*b2 - ((a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2 - 2*(a1 - 2*a2)*a3 - a3**2)*b0 - 2*(2*a0**2 - 9*a0*a1 + 9*a1**2 + 3*(2*a0 - 3*a1)*a2 - (a0 - 3*a2)*a3 - a3**2)*b1 + (5*a0**2 - 24*a0*a1 + 27*a1**2 + 18*(a0 - 2*a1)*a2 + 9*a2**2 - 2*(2*a0 - 3*a1)*a3 - a3**2)*b2)*b3)*t1**5 - 2*((5*a0*a1 - 13*a1**2 - (10*a0 - 37*a1)*a2 - 22*a2**2 + (5*a0 - 16*a1 + 17*a2)*a3 - 3*a3**2)*b0**2 - (5*a0**2 - a0*a1 - 30*a1**2 - (28*a0 - 123*a1)*a2 - 81*a2**2 + (19*a0 - 62*a1 + 67*a2)*a3 - 12*a3**2)*b0*b1 + 6*(2*a0**2 - 5*a0*a1 - (2*a0 - 15*a1)*a2 - 12*a2**2 + (3*a0 - 10*a1 + 11*a2)*a3 - 2*a3**2)*b1**2 + 3*(6*a0**2 - 23*a0*a1 + 21*a1**2 + 5*(2*a0 - 3*a1)*a2 + (a0 - 4*a1 + 5*a2)*a3 - a3**2)*b2**2 + 2*(a0**2 - 4*a0*a1 + 4*a1**2 + 2*(a0 - 2*a1)*a2 + a2**2)*b3**2 + (2*(5*a0**2 - 16*a0*a1 + 9*a1**2 + 2*(a0 + 6*a1)*a2 - 15*a2**2 + 2*(2*a0 - 7*a1 + 8*a2)*a3 - 3*a3**2)*b0 - 3*(11*a0**2 - 39*a0*a1 + 30*a1**2 + 3*(4*a0 - a1)*a2 - 15*a2**2 + (5*a0 - 18*a1 + 21*a2)*a3 - 4*a3**2)*b1)*b2 - ((5*a0**2 - 21*a0*a1 + 22*a1**2 + (12*a0 - 25*a1)*a2 + 7*a2**2 - (a0 - 2*a1 + a2)*a3)*b0 - 2*(7*a0**2 - 29*a0*a1 + 30*a1**2 + (16*a0 - 33*a1)*a2 + 9*a2**2 - (a0 - 2*a1 + a2)*a3)*b1 + (13*a0**2 - 53*a0*a1 + 54*a1**2 + (28*a0 - 57*a1)*a2 + 15*a2**2 - (a0 - 2*a1 + a2)*a3)*b2)*b3)*t1**4 + 2*((9*a0*a1 - 19*a1**2 - (19*a0 - 53*a1)*a2 - 27*a2**2 + 2*(5*a0 - 12*a1 + 10*a2)*a3 - 3*a3**2)*b0**2 + 3*(5*a0**2 - 9*a0*a1 - (13*a0 - 33*a1)*a2 - 18*a2**2 + 4*(3*a0 - 6*a1 + 4*a2)*a3 - 2*a3**2)*b1**2 + 3*(5*a0**2 - 15*a0*a1 + 12*a1**2 + (a0 - 3*a1)*a2 + 2*(2*a0 - 3*a1 + a2)*a3)*b2**2 + (a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*b3**2 + (a0**2*a1 - 6*a0*a1**2 + 9*a1**3 - 3*(2*a0 - 9*a1)*a2**2 - 9*a2**3 + (a1 - a2)*a3**2 - (a0**2 - 12*a0*a1 + 27*a1**2)*a2 - 2*(a0*a1 - 3*a1**2 - (a0 - 6*a1)*a2 - 3*a2**2)*a3)*b0 - (a0**3 - 6*a0**2*a1 + 9*a0*a1**2 + 3*(a0 + 6*a1)*a2**2 - 9*a2**3 + (a0 - a2)*a3**2 + (5*a0**2 - 12*a0*a1 - 9*a1**2)*a2 - 2*(a0**2 - 3*a0*a1 + (2*a0 + 3*a1)*a2 - 3*a2**2)*a3 + (9*a0**2 - 4*a0*a1 - 27*a1**2 - 2*(25*a0 - 69*a1)*a2 - 75*a2**2 + 2*(18*a0 - 40*a1 + 31*a2)*a3 - 9*a3**2)*b0)*b1 + (a0**3 - 7*a0**2*a1 + 15*a0*a1**2 - 9*a1**3 + 9*(a0 - a1)*a2**2 + (a0 - a1)*a3**2 + 6*(a0**2 - 4*a0*a1 + 3*a1**2)*a2 - 2*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2)*a3 + (19*a0**2 - 64*a0*a1 + 57*a1**2 + 12*(a0 - 2*a1)*a2 - 3*a2**2 + 2*(7*a0 - 13*a1 + 9*a2)*a3 - 3*a3**2)*b0 - 3*(13*a0**2 - 40*a0*a1 + 33*a1**2 + 2*(a0 - 3*a1)*a2 - 3*a2**2 + 2*(6*a0 - 10*a1 + 5*a2)*a3 - a3**2)*b1)*b2 - 2*((5*a0**2 - 21*a0*a1 + 23*a1**2 + 4*(3*a0 - 7*a1)*a2 + 9*a2**2 - (a0 - 3*a1 + 2*a2)*a3)*b0 - (9*a0**2 - 35*a0*a1 + 36*a1**2 + (17*a0 - 39*a1)*a2 + 12*a2**2 + 2*(a1 - a2)*a3)*b1 + (5*a0**2 - 17*a0*a1 + 15*a1**2 + 6*(a0 - 2*a1)*a2 + 3*a2**2 + (a0 - a1)*a3)*b2)*b3)*t1**3 + 3*((a0 - a1)*a2 - (a0 - a1)*a3)*b0**2 + 3*(2*a0**2 - 2*a0*a1 - (a0 - a1)*a2 - (a0 - a1)*a3)*b1**2 + 6*(a0**2 - 2*a0*a1 + a1**2)*b2**2 - ((14*a0*a1 - 22*a1**2 - (35*a0 - 69*a1)*a2 - 29*a2**2 + 3*(7*a0 - 13*a1 + 8*a2)*a3 - 3*a3**2)*b0**2 + 3*(2*a0**2 + 2*a0*a1 - 25*(a0 - a1)*a2 - 5*a2**2 + (19*a0 - 27*a1 + 10*a2)*a3 - a3**2)*b1**2 - 6*(a0**2 - 5*a0*a1 + 4*a1**2 + 5*(a0 - a1)*a2 - 2*(a0 - a1)*a3)*b2**2 + 10*(a0**2*a1 - 5*a0*a1**2 + 6*a1**3 - 4*(a0 - 3*a1)*a2**2 - 3*a2**3 - (a0**2 - 9*a0*a1 + 15*a1**2)*a2 - (a0*a1 - 2*a1**2 - (a0 - 3*a1)*a2 - a2**2)*a3)*b0 - 2*(5*a0**3 - 25*a0**2*a1 + 30*a0*a1**2 - 5*(a0 - 9*a1)*a2**2 - 15*a2**3 + 5*(3*a0**2 - 4*a0*a1 - 6*a1**2)*a2 - 5*(a0**2 - 2*a0*a1 + 2*a1*a2 - a2**2)*a3 + (7*a0**2 - 8*a0*a1 + 3*a1**2 - (39*a0 - 56*a1)*a2 - 22*a2**2 + 3*(11*a0 - 18*a1 + 9*a2)*a3 - 3*a3**2)*b0)*b1 + (10*a0**3 - 60*a0**2*a1 + 110*a0*a1**2 - 60*a1**3 + 30*(a0 - a1)*a2**2 + 10*(4*a0**2 - 13*a0*a1 + 9*a1**2)*a2 - 10*(a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*a3 + (35*a0**2 - 126*a0*a1 + 127*a1**2 + (35*a0 - 101*a1)*a2 + 30*a2**2 + 3*(7*a0 - 9*a1 + 2*a2)*a3)*b0 - 3*(7*a0**2 - 20*a0*a1 + 25*a1**2 - (9*a0 + 13*a1)*a2 + 10*a2**2 + (15*a0 - 17*a1 + 2*a2)*a3)*b1)*b2 - ((21*a0**2 - 82*a0*a1 + 77*a1**2 + (43*a0 - 75*a1)*a2 + 16*a2**2 - 3*(a0 - a1)*a3)*b0 - (23*a0**2 - 88*a0*a1 + 81*a1**2 + (45*a0 - 77*a1)*a2 + 16*a2**2 - 3*(a0 - a1)*a3)*b1 + 2*(a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*b2)*b3)*t1**2 - 3*(4*a0**2*a1 - 14*a0*a1**2 + 10*a1**3 - 6*(a0 - a1)*a2**2 - 3*(a0**2 - 6*a0*a1 + 5*a1**2)*a2 - (a0**2 - 2*a0*a1 + a1**2)*a3)*b0 + 3*(4*a0**3 - 14*a0**2*a1 + 10*a0*a1**2 - 6*(a0 - a1)*a2**2 + 3*(a0**2 + 2*a0*a1 - 3*a1**2)*a2 - (a0**2 - 2*a0*a1 + a1**2)*a3 - 2*(a0*a1 - a1**2 - (a0 - a1)*a3)*b0)*b1 - 3*(3*a0**3 - 15*a0**2*a1 + 21*a0*a1**2 - 9*a1**3 + 6*(a0**2 - 2*a0*a1 + a1**2)*a2 + (a0**2 - 4*a0*a1 + 3*a1**2 + 2*(a0 - a1)*a2)*b0 + (3*a0**2 - 4*a0*a1 + a1**2 - 2*(a0 - a1)*a2)*b1)*b2 - 3*(a0**3 - 3*a0**2*a1 + 3*a0*a1**2 - a1**3 - (a0**2 - 2*a0*a1 + a1**2)*b0 + (a0**2 - 2*a0*a1 + a1**2)*b1)*b3 + 2*((2*a0*a1 - 2*a1**2 - (8*a0 - 11*a1)*a2 - 3*a2**2 + 3*(2*a0 - 3*a1 + a2)*a3)*b0**2 - 3*(2*a0**2 - 4*a0*a1 + 3*a0*a2 - a2**2 - (3*a0 - 4*a1 + a2)*a3)*b1**2 - 3*(3*a0**2 - 8*a0*a1 + 5*a1**2 + 2*(a0 - a1)*a2)*b2**2 + 2*(5*a0**2*a1 - 20*a0*a1**2 + 18*a1**3 - 3*(4*a0 - 7*a1)*a2**2 - 3*a2**3 - (5*a0**2 - 32*a0*a1 + 36*a1**2)*a2 - 2*(a0*a1 - a1**2 - (a0 - a1)*a2)*a3)*b0 - (10*a0**3 - 40*a0**2*a1 + 36*a0*a1**2 - 18*(a0 - 2*a1)*a2**2 - 6*a2**3 + 2*(7*a0**2 + 2*a0*a1 - 18*a1**2)*a2 - 4*(a0**2 - a0*a1 - (a0 - a1)*a2)*a3 + (2*a0**2 - 8*a0*a1 + 12*a1**2 - (11*a0 - 5*a1)*a2 + 3*(5*a0 - 7*a1 + 2*a2)*a3)*b0)*b1 + (10*a0**3 - 50*a0**2*a1 + 76*a0*a1**2 - 36*a1**3 + 6*(a0 - a1)*a2**2 + 12*(2*a0**2 - 5*a0*a1 + 3*a1**2)*a2 - 4*(a0**2 - 2*a0*a1 + a1**2)*a3 + (8*a0**2 - 31*a0*a1 + 29*a1**2 + 12*(a0 - 2*a1)*a2 + 6*a2**2 + 3*(a0 - a1)*a3)*b0 + 3*(3*a0**2 - 5*a0*a1 + 4*a1*a2 - 2*a2**2 - (a0 - a1)*a3)*b1)*b2 - ((6*a0**2 - 19*a0*a1 + 13*a1**2 + 7*(a0 - a1)*a2)*b0 - (5*a0**2 - 17*a0*a1 + 12*a1**2 + 7*(a0 - a1)*a2)*b1 - (a0**2 - 2*a0*a1 + a1**2)*b2)*b3)*t1
    ds_n1 = 2*((2*a0*a1 - 6*a1**2 - 3*(a0 - 5*a1)*a2 - 9*a2**2 + (a0 - 5*a1 + 6*a2)*a3 - a3**2)*b0**2 + 3*(2*a0**2 - 6*a0*a1 + 3*(a0 + 3*a1)*a2 - 9*a2**2 - (a0 + 3*a1 - 6*a2)*a3 - a3**2)*b1**2 + 9*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2 - (a0 - a1)*a3)*b2**2 + (a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2 - (a0 - a1)*a3)*b3**2 - (2*a0**2*a1 - 12*a0*a1**2 + 18*a1**3 - 18*(a0 - 4*a1)*a2**2 - 27*a2**3 - (2*a0 - 8*a1 + 9*a2)*a3**2 + a3**3 - 3*(a0**2 - 10*a0*a1 + 21*a1**2)*a2 + (a0**2 - 10*a0*a1 + 21*a1**2 + 12*(a0 - 4*a1)*a2 + 27*a2**2)*a3)*b0 + (2*a0**3 - 12*a0**2*a1 + 18*a0*a1**2 + 54*a1*a2**2 - 27*a2**3 + 3*(2*a1 - 3*a2)*a3**2 + a3**3 + 9*(a0**2 - 2*a0*a1 - 3*a1**2)*a2 - 3*(a0**2 - 2*a0*a1 - 3*a1**2 + 12*a1*a2 - 9*a2**2)*a3 - 2*(a0**2 - 9*a1**2 - 3*(a0 - 9*a1)*a2 - 18*a2**2 + (a0 - 9*a1 + 12*a2)*a3 - 2*a3**2)*b0)*b1 - 3*(a0**3 - 7*a0**2*a1 + 15*a0*a1**2 - 9*a1**3 + 9*(a0 - a1)*a2**2 + (a0 - a1)*a3**2 + 6*(a0**2 - 4*a0*a1 + 3*a1**2)*a2 - 2*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2)*a3 - (a0**2 - 2*a0*a1 - 3*a1**2 + 12*a1*a2 - 9*a2**2 - 2*(2*a1 - 3*a2)*a3 - a3**2)*b0 + (5*a0**2 - 18*a0*a1 + 9*a1**2 + 12*a0*a2 - 9*a2**2 - 2*(2*a0 - 3*a2)*a3 - a3**2)*b1)*b2 + (a0**3 - 7*a0**2*a1 + 15*a0*a1**2 - 9*a1**3 + 9*(a0 - a1)*a2**2 + (a0 - a1)*a3**2 + 6*(a0**2 - 4*a0*a1 + 3*a1**2)*a2 - 2*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2)*a3 - (a0**2 - 2*a0*a1 - 3*a1**2 + 12*a1*a2 - 9*a2**2 - 2*(2*a1 - 3*a2)*a3 - a3**2)*b0 + (5*a0**2 - 18*a0*a1 + 9*a1**2 + 12*a0*a2 - 9*a2**2 - 2*(2*a0 - 3*a2)*a3 - a3**2)*b1 - 6*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2 - (a0 - a1)*a3)*b2)*b3)*t1**3 - 4*(a0*a1 - a1**2 - (a0 - a1)*a2)*b0**2 - 12*(a0**2 - a0*a1 - (a0 - a1)*a2)*b1**2 - 12*(a0**2 - 2*a0*a1 + a1**2)*b2**2 - 2*(2*(3*a0*a1 - 7*a1**2 - 2*(2*a0 - 7*a1)*a2 - 6*a2**2 + (a0 - 3*a1 + 2*a2)*a3)*b0**2 + 6*(3*a0**2 - 7*a0*a1 + (a0 + 9*a1)*a2 - 6*a2**2 - 2*(a1 - a2)*a3)*b1**2 + 6*(4*a0**2 - 13*a0*a1 + 9*a1**2 + 6*(a0 - a1)*a2 - (a0 - a1)*a3)*b2**2 + 2*(a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*b3**2 - (12*a0**2*a1 - 62*a0*a1**2 + 78*a1**3 - 3*(24*a0 - 73*a1)*a2**2 - 63*a2**3 - (5*a0 - 12*a1 + 7*a2)*a3**2 - (17*a0**2 - 139*a0*a1 + 234*a1**2)*a2 + (5*a0**2 - 39*a0*a1 + 62*a1**2 + (39*a0 - 109*a1)*a2 + 42*a2**2)*a3)*b0 + (12*a0**3 - 62*a0**2*a1 + 78*a0*a1**2 - 3*(8*a0 - 57*a1)*a2**2 - 63*a2**3 - (3*a0 - 10*a1 + 7*a2)*a3**2 + (35*a0**2 - 39*a0*a1 - 108*a1**2)*a2 - (9*a0**2 - 7*a0*a1 - 30*a1**2 - (17*a0 - 87*a1)*a2 - 42*a2**2)*a3 - 2*(3*a0**2 + 2*a0*a1 - 21*a1**2 - (11*a0 - 51*a1)*a2 - 24*a2**2 + (3*a0 - 11*a1 + 8*a2)*a3)*b0)*b1 - (17*a0**3 - 104*a0**2*a1 + 195*a0*a1**2 - 108*a1**3 + 63*(a0 - a1)*a2**2 + 2*(a0 - a1)*a3**2 + 9*(8*a0**2 - 27*a0*a1 + 19*a1**2)*a2 - (19*a0**2 - 61*a0*a1 + 42*a1**2 + 27*(a0 - a1)*a2)*a3 - 4*(2*a0**2 - 2*a0*a1 - 6*a1**2 - 3*(a0 - 6*a1)*a2 - 9*a2**2 + (a0 - 4*a1 + 3*a2)*a3)*b0 + 6*(7*a0**2 - 20*a0*a1 + 9*a1**2 + (7*a0 + 3*a1)*a2 - 6*a2**2 - (a0 + a1 - 2*a2)*a3)*b1)*b2 + (5*a0**3 - 30*a0**2*a1 + 55*a0*a1**2 - 30*a1**3 + 15*(a0 - a1)*a2**2 + 5*(4*a0**2 - 13*a0*a1 + 9*a1**2)*a2 - 5*(a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*a3 - 2*(a0**2 - 5*a1**2 - (3*a0 - 13*a1)*a2 - 6*a2**2 + (a0 - 3*a1 + 2*a2)*a3)*b0 + 4*(3*a0**2 - 8*a0*a1 + 3*a1**2 + (2*a0 + 3*a1)*a2 - 3*a2**2 - (a1 - a2)*a3)*b1 - 2*(7*a0**2 - 22*a0*a1 + 15*a1**2 + 9*(a0 - a1)*a2 - (a0 - a1)*a3)*b2)*b3)*t1**2 + 8*(5*a0**2*a1 - 20*a0*a1**2 + 18*a1**3 - 3*(4*a0 - 7*a1)*a2**2 - 3*a2**3 - (5*a0**2 - 32*a0*a1 + 36*a1**2)*a2 - 2*(a0*a1 - a1**2 - (a0 - a1)*a2)*a3)*b0 - 4*(10*a0**3 - 40*a0**2*a1 + 36*a0*a1**2 - 18*(a0 - 2*a1)*a2**2 - 6*a2**3 + 2*(7*a0**2 + 2*a0*a1 - 18*a1**2)*a2 - 4*(a0**2 - a0*a1 - (a0 - a1)*a2)*a3 - (a0**2 + 2*a0*a1 - 3*a1**2 - 4*(a0 - a1)*a2)*b0)*b1 + 4*(10*a0**3 - 50*a0**2*a1 + 76*a0*a1**2 - 36*a1**3 + 6*(a0 - a1)*a2**2 + 12*(2*a0**2 - 5*a0*a1 + 3*a1**2)*a2 - 4*(a0**2 - 2*a0*a1 + a1**2)*a3 - (a0**2 + a0*a1 - 2*a1**2 - 3*(a0 - a1)*a2)*b0 + 3*(2*a0**2 - 3*a0*a1 + a1**2 - (a0 - a1)*a2)*b1)*b2 + 4*((a0*a1 - a1**2 - (a0 - a1)*a2)*b0 - (a0**2 - a0*a1 - (a0 - a1)*a2)*b1 + (a0**2 - 2*a0*a1 + a1**2)*b2)*b3 + 2*((6*a0*a1 - 10*a1**2 - (7*a0 - 15*a1)*a2 - 4*a2**2 + (a0 - a1)*a3)*b0**2 + 3*(6*a0**2 - 10*a0*a1 - (3*a0 - 11*a1)*a2 - 4*a2**2 + (a0 - a1)*a3)*b1**2 + 3*(7*a0**2 - 18*a0*a1 + 11*a1**2 + 4*(a0 - a1)*a2)*b2**2 + (a0**2 - 2*a0*a1 + a1**2)*b3**2 - 2*(15*a0**2*a1 - 65*a0*a1**2 + 66*a1**3 - 8*(7*a0 - 15*a1)*a2**2 - 24*a2**3 - 2*(a0 - a1)*a3**2 - (20*a0**2 - 129*a0*a1 + 165*a1**2)*a2 + (5*a0**2 - 29*a0*a1 + 32*a1**2 + (23*a0 - 39*a1)*a2 + 8*a2**2)*a3)*b0 + 2*(15*a0**3 - 65*a0**2*a1 + 66*a0*a1**2 - (35*a0 - 99*a1)*a2**2 - 24*a2**3 - 2*(a0 - a1)*a3**2 + 4*(6*a0**2 + a0*a1 - 21*a1**2)*a2 - 2*(2*a0**2 + 3*a0*a1 - 9*a1**2 - (9*a0 - 17*a1)*a2 - 4*a2**2)*a3 - (3*a0**2 + 4*a0*a1 - 15*a1**2 - 4*(3*a0 - 7*a1)*a2 - 8*a2**2 + 2*(a0 - a1)*a3)*b0)*b1 - (40*a0**3 - 210*a0**2*a1 + 338*a0*a1**2 - 168*a1**3 + 48*(a0 - a1)*a2**2 + 2*(56*a0**2 - 155*a0*a1 + 99*a1**2)*a2 - 2*(11*a0**2 - 27*a0*a1 + 16*a1**2 + 5*(a0 - a1)*a2)*a3 - (7*a0**2 - 19*a1**2 - (17*a0 - 41*a1)*a2 - 12*a2**2 + 3*(a0 - a1)*a3)*b0 + 3*(13*a0**2 - 28*a0*a1 + 11*a1**2 + (a0 + 7*a1)*a2 - 4*a2**2 + (a0 - a1)*a3)*b1)*b2 + (10*a0**3 - 50*a0**2*a1 + 76*a0*a1**2 - 36*a1**3 + 6*(a0 - a1)*a2**2 + 12*(2*a0**2 - 5*a0*a1 + 3*a1**2)*a2 - 4*(a0**2 - 2*a0*a1 + a1**2)*a3 - (a0**2 + 4*a0*a1 - 9*a1**2 - (7*a0 - 15*a1)*a2 - 4*a2**2 + (a0 - a1)*a3)*b0 + (9*a0**2 - 16*a0*a1 + 3*a1**2 - (3*a0 - 11*a1)*a2 - 4*a2**2 + (a0 - a1)*a3)*b1 - 2*(5*a0**2 - 12*a0*a1 + 7*a1**2 + 2*(a0 - a1)*a2)*b2)*b3)*t1
    ds_n2 = -2*((a0*a1 - 3*a1**2 - (2*a0 - 9*a1)*a2 - 6*a2**2 + (a0 - 4*a1 + 5*a2)*a3 - a3**2)*b0**2 + 3*(a0**2 - 3*a0*a1 + 9*a1*a2 - 9*a2**2 + (a0 - 6*a1 + 9*a2)*a3 - 2*a3**2)*b1**2 + 3*(2*a0**2 - 9*a0*a1 + 9*a1**2 + 3*(2*a0 - 3*a1)*a2 - (a0 - 3*a2)*a3 - a3**2)*b2**2 + (a0**2 - 5*a0*a1 + 6*a1**2 + (4*a0 - 9*a1)*a2 + 3*a2**2 - (a0 - 2*a1 + a2)*a3)*b3**2 - (a0**2*a1 - 6*a0*a1**2 + 9*a1**3 - 3*(4*a0 - 15*a1)*a2**2 - 18*a2**3 - (2*a0 - 7*a1 + 8*a2)*a3**2 + a3**3 - 2*(a0**2 - 9*a0*a1 + 18*a1**2)*a2 + (a0**2 - 8*a0*a1 + 15*a1**2 + 2*(5*a0 - 18*a1)*a2 + 21*a2**2)*a3)*b0 + (a0**3 - 6*a0**2*a1 + 9*a0*a1**2 - 9*(a0 - 6*a1)*a2**2 - 27*a2**3 - 3*(a0 - 4*a1 + 5*a2)*a3**2 + 2*a3**3 + 3*(a0**2 - 9*a1**2)*a2 - 6*(a0*a1 - 3*a1**2 - (2*a0 - 9*a1)*a2 - 6*a2**2)*a3 - (a0**2 - 9*a1**2 - 6*(a0 - 6*a1)*a2 - 27*a2**2 + 2*(2*a0 - 9*a1 + 12*a2)*a3 - 5*a3**2)*b0)*b1 - (2*a0**3 - 15*a0**2*a1 + 36*a0*a1**2 - 27*a1**3 + 9*(2*a0 - 3*a1)*a2**2 + 3*(a1 - 2*a2)*a3**2 + a3**3 + 6*(2*a0**2 - 9*a0*a1 + 9*a1**2)*a2 - 3*(a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2)*a3 - 2*(a0**2 - 3*a0*a1 + 9*a1*a2 - 9*a2**2 + (a0 - 6*a1 + 9*a2)*a3 - 2*a3**2)*b0 + 9*(a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2 - 2*(a1 - 2*a2)*a3 - a3**2)*b1)*b2 + (a0**3 - 8*a0**2*a1 + 21*a0*a1**2 - 18*a1**3 + 3*(5*a0 - 12*a1)*a2**2 + 9*a2**3 + (a0 - 2*a1 + a2)*a3**2 + (7*a0**2 - 36*a0*a1 + 45*a1**2)*a2 - 2*(a0**2 - 5*a0*a1 + 6*a1**2 + (4*a0 - 9*a1)*a2 + 3*a2**2)*a3 - (a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2 - 2*(a1 - 2*a2)*a3 - a3**2)*b0 + 2*(2*a0**2 - 9*a0*a1 + 9*a1**2 + 3*(2*a0 - 3*a1)*a2 - (a0 - 3*a2)*a3 - a3**2)*b1 - (5*a0**2 - 24*a0*a1 + 27*a1**2 + 18*(a0 - 2*a1)*a2 + 9*a2**2 - 2*(2*a0 - 3*a1)*a3 - a3**2)*b2)*b3)*t1**3 + (2*a0*a1 - 2*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0**2 + 3*(2*a0**2 - 2*a0*a1 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1**2 + 9*(a0**2 - 2*a0*a1 + a1**2)*b2**2 + (a0**2 - 2*a0*a1 + a1**2)*b3**2 + ((6*a0*a1 - 14*a1**2 - (11*a0 - 35*a1)*a2 - 17*a2**2 + (5*a0 - 13*a1 + 10*a2)*a3 - a3**2)*b0**2 + 3*(6*a0**2 - 14*a0*a1 - (5*a0 - 33*a1)*a2 - 21*a2**2 + (7*a0 - 19*a1 + 14*a2)*a3 - a3**2)*b1**2 + 3*(11*a0**2 - 40*a0*a1 + 33*a1**2 + (17*a0 - 21*a1)*a2 + (a0 - 5*a1 + 4*a2)*a3)*b2**2 + (5*a0**2 - 20*a0*a1 + 19*a1**2 + (11*a0 - 19*a1)*a2 + 4*a2**2 - (a0 - a1)*a3)*b3**2 - 2*(9*a0**2*a1 - 49*a0*a1**2 + 66*a1**3 - (76*a0 - 249*a1)*a2**2 - 84*a2**3 - (9*a0 - 26*a1 + 23*a2)*a3**2 + 2*a3**3 - (16*a0**2 - 130*a0*a1 + 231*a1**2)*a2 + (7*a0**2 - 50*a0*a1 + 82*a1**2 + 2*(27*a0 - 83*a1)*a2 + 79*a2**2)*a3)*b0 + 2*(9*a0**3 - 49*a0**2*a1 + 66*a0*a1**2 - 9*(5*a0 - 27*a1)*a2**2 - 99*a2**3 - 2*(5*a0 - 16*a1 + 14*a2)*a3**2 + 2*a3**3 + (23*a0**2 - 6*a0*a1 - 144*a1**2)*a2 - (a0**2 + 28*a0*a1 - 78*a1**2 - 2*(25*a0 - 96*a1)*a2 - 99*a2**2)*a3 - (3*a0**2 + 2*a0*a1 - 21*a1**2 - (19*a0 - 69*a1)*a2 - 36*a2**2 + (11*a0 - 29*a1 + 22*a2)*a3 - 2*a3**2)*b0)*b1 - (32*a0**3 - 214*a0**2*a1 + 450*a0*a1**2 - 288*a1**3 + 6*(28*a0 - 33*a1)*a2**2 + 2*(a0 + 4*a1 - 5*a2)*a3**2 + 2*(76*a0**2 - 294*a0*a1 + 243*a1**2)*a2 - 2*(17*a0**2 - 58*a0*a1 + 36*a1**2 + 2*(13*a0 - 3*a1)*a2 - 15*a2**2)*a3 - (11*a0**2 - 22*a0*a1 - 9*a1**2 - 4*(4*a0 - 21*a1)*a2 - 51*a2**2 + 2*(8*a0 - 22*a1 + 17*a2)*a3 - 3*a3**2)*b0 + 3*(17*a0**2 - 54*a0*a1 + 33*a1**2 + 12*(a0 + a1)*a2 - 21*a2**2 + 2*(4*a0 - 12*a1 + 9*a2)*a3 - a3**2)*b1)*b2 + (14*a0**3 - 98*a0**2*a1 + 220*a0*a1**2 - 156*a1**3 + 2*(53*a0 - 93*a1)*a2**2 + 30*a2**3 + 4*(a0 - a1)*a3**2 + 2*(37*a0**2 - 158*a0*a1 + 156*a1**2)*a2 - 2*(9*a0**2 - 36*a0*a1 + 32*a1**2 + 2*(11*a0 - 16*a1)*a2 + 5*a2**2)*a3 - (5*a0**2 - 14*a0*a1 + 5*a1**2 + 16*a1*a2 - 13*a2**2 + 2*(2*a0 - 6*a1 + 5*a2)*a3 - a3**2)*b0 + (21*a0**2 - 74*a0*a1 + 57*a1**2 + 4*(7*a0 - 6*a1)*a2 - 9*a2**2 + 2*(2*a0 - 8*a1 + 7*a2)*a3 - a3**2)*b1 - 2*(13*a0**2 - 50*a0*a1 + 45*a1**2 + (25*a0 - 39*a1)*a2 + 6*a2**2 - (a0 + a1 - 2*a2)*a3)*b2)*b3)*t1**2 - 2*(25*a0**2*a1 - 115*a0*a1**2 + 126*a1**3 - 48*(2*a0 - 5*a1)*a2**2 - 54*a2**3 - 2*(a0 - a1)*a3**2 - 3*(10*a0**2 - 73*a0*a1 + 105*a1**2)*a2 + (5*a0**2 - 39*a0*a1 + 52*a1**2 + 3*(11*a0 - 23*a1)*a2 + 18*a2**2)*a3)*b0 + 2*(25*a0**3 - 115*a0**2*a1 + 126*a0*a1**2 - 9*(5*a0 - 21*a1)*a2**2 - 54*a2**3 - 2*(a0 - a1)*a3**2 + 18*(3*a0**2 - 2*a0*a1 - 8*a1**2)*a2 - 2*(7*a0**2 - 7*a0*a1 - 9*a1**2 - 9*(a0 - 3*a1)*a2 - 9*a2**2)*a3 - (a0**2 + 2*a0*a1 - 3*a1**2 - 6*(a0 - a1)*a2 + 2*(a0 - a1)*a3)*b0)*b1 - 3*(20*a0**3 - 110*a0**2*a1 + 186*a0*a1**2 - 96*a1**3 + 36*(a0 - a1)*a2**2 + 2*(32*a0**2 - 95*a0*a1 + 63*a1**2)*a2 - 2*(7*a0**2 - 19*a0*a1 + 12*a1**2 + 5*(a0 - a1)*a2)*a3 - (a0**2 - a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 + (5*a0**2 - 8*a0*a1 + 3*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1)*b2 + (10*a0**3 - 50*a0**2*a1 + 76*a0*a1**2 - 36*a1**3 + 6*(a0 - a1)*a2**2 + 12*(2*a0**2 - 5*a0*a1 + 3*a1**2)*a2 - 4*(a0**2 - 2*a0*a1 + a1**2)*a3 - (a0**2 - a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 + (5*a0**2 - 8*a0*a1 + 3*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1 - 6*(a0**2 - 2*a0*a1 + a1**2)*b2)*b3 - 2*((3*a0*a1 - 5*a1**2 - 5*(a0 - 2*a1)*a2 - 3*a2**2 + (2*a0 - 3*a1 + a2)*a3)*b0**2 + 3*(3*a0**2 - 5*a0*a1 - (4*a0 - 9*a1)*a2 - 3*a2**2 + (3*a0 - 4*a1 + a2)*a3)*b1**2 + 3*(5*a0**2 - 14*a0*a1 + 9*a1**2 + 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b2**2 + 2*(a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*b3**2 - (33*a0**2*a1 - 158*a0*a1**2 + 183*a1**3 - 3*(62*a0 - 163*a1)*a2**2 - 129*a2**3 - (14*a0 - 27*a1 + 13*a2)*a3**2 - (53*a0**2 - 370*a0*a1 + 549*a1**2)*a2 + 2*(10*a0**2 - 60*a0*a1 + 79*a1**2 + (54*a0 - 125*a1)*a2 + 42*a2**2)*a3)*b0 + (33*a0**3 - 158*a0**2*a1 + 183*a0*a1**2 - 9*(13*a0 - 48*a1)*a2**2 - 135*a2**3 - (15*a0 - 28*a1 + 13*a2)*a3**2 + (59*a0**2 + 18*a0*a1 - 315*a1**2)*a2 - 2*(34*a0*a1 - 66*a1**2 - 7*(7*a0 - 18*a1)*a2 - 45*a2**2)*a3 - (3*a0**2 + 4*a0*a1 - 15*a1**2 - (19*a0 - 39*a1)*a2 - 12*a2**2 + (9*a0 - 13*a1 + 4*a2)*a3)*b0)*b1 - (53*a0**3 - 311*a0**2*a1 + 567*a0*a1**2 - 315*a1**3 + 3*(43*a0 - 45*a1)*a2**2 - (a0 - a1)*a3**2 + 6*(31*a0**2 - 101*a0*a1 + 72*a1**2)*a2 - 2*(17*a0**2 - 47*a0*a1 + 27*a1**2 + 6*(2*a0 - a1)*a2 - 3*a2**2)*a3 - (5*a0**2 - 5*a0*a1 - 6*a1**2 - 3*(4*a0 - 9*a1)*a2 - 9*a2**2 + (7*a0 - 10*a1 + 3*a2)*a3)*b0 + 3*(8*a0**2 - 19*a0*a1 + 9*a1**2 - (a0 - 6*a1)*a2 - 3*a2**2 + (4*a0 - 5*a1 + a2)*a3)*b1)*b2 + (20*a0**3 - 120*a0**2*a1 + 226*a0*a1**2 - 132*a1**3 + 6*(10*a0 - 13*a1)*a2**2 + 6*a2**3 + 2*(37*a0**2 - 127*a0*a1 + 99*a1**2)*a2 - 14*(a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*a3 - (2*a0**2 - 3*a0*a1 - a1**2 - (3*a0 - 8*a1)*a2 - 3*a2**2 + (2*a0 - 3*a1 + a2)*a3)*b0 + (9*a0**2 - 23*a0*a1 + 12*a1**2 + (2*a0 + 3*a1)*a2 - 3*a2**2 + (3*a0 - 4*a1 + a2)*a3)*b1 - (11*a0**2 - 32*a0*a1 + 21*a1**2 + 9*(a0 - a1)*a2 + (a0 - a1)*a3)*b2)*b3)*t1
    ds_n3 = 4*((a0**2*a1 - 6*a0*a1**2 + 9*a1**3 - 3*(4*a0 - 15*a1)*a2**2 - 18*a2**3 - (2*a0 - 7*a1 + 8*a2)*a3**2 + a3**3 - 2*(a0**2 - 9*a0*a1 + 18*a1**2)*a2 + (a0**2 - 8*a0*a1 + 15*a1**2 + 2*(5*a0 - 18*a1)*a2 + 21*a2**2)*a3)*b0 - (a0**3 - 6*a0**2*a1 + 9*a0*a1**2 - 9*(a0 - 6*a1)*a2**2 - 27*a2**3 - 3*(a0 - 4*a1 + 5*a2)*a3**2 + 2*a3**3 + 3*(a0**2 - 9*a1**2)*a2 - 6*(a0*a1 - 3*a1**2 - (2*a0 - 9*a1)*a2 - 6*a2**2)*a3)*b1 + (2*a0**3 - 15*a0**2*a1 + 36*a0*a1**2 - 27*a1**3 + 9*(2*a0 - 3*a1)*a2**2 + 3*(a1 - 2*a2)*a3**2 + a3**3 + 6*(2*a0**2 - 9*a0*a1 + 9*a1**2)*a2 - 3*(a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2)*a3)*b2 - (a0**3 - 8*a0**2*a1 + 21*a0*a1**2 - 18*a1**3 + 3*(5*a0 - 12*a1)*a2**2 + 9*a2**3 + (a0 - 2*a1 + a2)*a3**2 + (7*a0**2 - 36*a0*a1 + 45*a1**2)*a2 - 2*(a0**2 - 5*a0*a1 + 6*a1**2 + (4*a0 - 9*a1)*a2 + 3*a2**2)*a3)*b3)*t1**2 + 2*(14*a0**2*a1 - 74*a0*a1**2 + 96*a1**3 - 21*(4*a0 - 13*a1)*a2**2 - 81*a2**3 - (5*a0 - 14*a1 + 9*a2)*a3**2 - (19*a0**2 - 163*a0*a1 + 288*a1**2)*a2 + (5*a0**2 - 43*a0*a1 + 74*a1**2 + (43*a0 - 133*a1)*a2 + 54*a2**2)*a3)*b0 - 2*(14*a0**3 - 74*a0**2*a1 + 96*a0*a1**2 - 9*(2*a0 - 23*a1)*a2**2 - 81*a2**3 - (a0 - 10*a1 + 9*a2)*a3**2 + 9*(5*a0**2 - 7*a0*a1 - 14*a1**2)*a2 - (13*a0**2 - 19*a0*a1 - 30*a1**2 - 9*(a0 - 11*a1)*a2 - 54*a2**2)*a3)*b1 + 2*(19*a0**3 - 118*a0**2*a1 + 225*a0*a1**2 - 126*a1**3 + 81*(a0 - a1)*a2**2 + 4*(a0 - a1)*a3**2 + 3*(28*a0**2 - 97*a0*a1 + 69*a1**2)*a2 - (23*a0**2 - 77*a0*a1 + 54*a1**2 + 39*(a0 - a1)*a2)*a3)*b2 - 10*(a0**3 - 6*a0**2*a1 + 11*a0*a1**2 - 6*a1**3 + 3*(a0 - a1)*a2**2 + (4*a0**2 - 13*a0*a1 + 9*a1**2)*a2 - (a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*a3)*b3 - 2*((16*a0**2*a1 - 86*a0*a1**2 + 114*a1**3 - 2*(67*a0 - 213*a1)*a2**2 - 141*a2**3 - (16*a0 - 44*a1 + 37*a2)*a3**2 + 3*a3**3 - (29*a0**2 - 230*a0*a1 + 399*a1**2)*a2 + (13*a0**2 - 90*a0*a1 + 143*a1**2 + 4*(24*a0 - 71*a1)*a2 + 131*a2**2)*a3)*b0 - (16*a0**3 - 86*a0**2*a1 + 114*a0*a1**2 - 18*(5*a0 - 24*a1)*a2**2 - 171*a2**3 - (20*a0 - 58*a1 + 47*a2)*a3**2 + 3*a3**3 + (37*a0**2 + 6*a0*a1 - 261*a1**2)*a2 + (a0**2 - 62*a0*a1 + 147*a1**2 + 4*(25*a0 - 87*a1)*a2 + 171*a2**2)*a3)*b1 + (29*a0**3 - 193*a0**2*a1 + 405*a0*a1**2 - 261*a1**3 + 3*(47*a0 - 57*a1)*a2**2 - (a0 - 11*a1 + 10*a2)*a3**2 + 2*(67*a0**2 - 258*a0*a1 + 216*a1**2)*a2 - 2*(14*a0**2 - 46*a0*a1 + 27*a1**2 + (17*a0 + 3*a1)*a2 - 15*a2**2)*a3)*b2 - (13*a0**3 - 91*a0**2*a1 + 205*a0*a1**2 - 147*a1**3 + (97*a0 - 177*a1)*a2**2 + 30*a2**3 + 3*(a0 - a1)*a3**2 + 2*(34*a0**2 - 146*a0*a1 + 147*a1**2)*a2 - 2*(8*a0**2 - 32*a0*a1 + 29*a1**2 + (19*a0 - 29*a1)*a2 + 5*a2**2)*a3)*b3)*t1
    ds_n4 = -3*(2*a0**2*a1 - 12*a0*a1**2 + 18*a1**3 - 18*(a0 - 4*a1)*a2**2 - 27*a2**3 - (2*a0 - 8*a1 + 9*a2)*a3**2 + a3**3 - 3*(a0**2 - 10*a0*a1 + 21*a1**2)*a2 + (a0**2 - 10*a0*a1 + 21*a1**2 + 12*(a0 - 4*a1)*a2 + 27*a2**2)*a3)*b0 + 3*(2*a0**3 - 12*a0**2*a1 + 18*a0*a1**2 + 54*a1*a2**2 - 27*a2**3 + 3*(2*a1 - 3*a2)*a3**2 + a3**3 + 9*(a0**2 - 2*a0*a1 - 3*a1**2)*a2 - 3*(a0**2 - 2*a0*a1 - 3*a1**2 + 12*a1*a2 - 9*a2**2)*a3)*b1 - 9*(a0**3 - 7*a0**2*a1 + 15*a0*a1**2 - 9*a1**3 + 9*(a0 - a1)*a2**2 + (a0 - a1)*a3**2 + 6*(a0**2 - 4*a0*a1 + 3*a1**2)*a2 - 2*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2)*a3)*b2 + 3*(a0**3 - 7*a0**2*a1 + 15*a0*a1**2 - 9*a1**3 + 9*(a0 - a1)*a2**2 + (a0 - a1)*a3**2 + 6*(a0**2 - 4*a0*a1 + 3*a1**2)*a2 - 2*(a0**2 - 4*a0*a1 + 3*a1**2 + 3*(a0 - a1)*a2)*a3)*b3 + 6*((a0**2*a1 - 6*a0*a1**2 + 9*a1**3 - 3*(4*a0 - 15*a1)*a2**2 - 18*a2**3 - (2*a0 - 7*a1 + 8*a2)*a3**2 + a3**3 - 2*(a0**2 - 9*a0*a1 + 18*a1**2)*a2 + (a0**2 - 8*a0*a1 + 15*a1**2 + 2*(5*a0 - 18*a1)*a2 + 21*a2**2)*a3)*b0 - (a0**3 - 6*a0**2*a1 + 9*a0*a1**2 - 9*(a0 - 6*a1)*a2**2 - 27*a2**3 - 3*(a0 - 4*a1 + 5*a2)*a3**2 + 2*a3**3 + 3*(a0**2 - 9*a1**2)*a2 - 6*(a0*a1 - 3*a1**2 - (2*a0 - 9*a1)*a2 - 6*a2**2)*a3)*b1 + (2*a0**3 - 15*a0**2*a1 + 36*a0*a1**2 - 27*a1**3 + 9*(2*a0 - 3*a1)*a2**2 + 3*(a1 - 2*a2)*a3**2 + a3**3 + 6*(2*a0**2 - 9*a0*a1 + 9*a1**2)*a2 - 3*(a0**2 - 4*a0*a1 + 3*a1**2 + 2*a0*a2 - 3*a2**2)*a3)*b2 - (a0**3 - 8*a0**2*a1 + 21*a0*a1**2 - 18*a1**3 + 3*(5*a0 - 12*a1)*a2**2 + 9*a2**3 + (a0 - 2*a1 + a2)*a3**2 + (7*a0**2 - 36*a0*a1 + 45*a1**2)*a2 - 2*(a0**2 - 5*a0*a1 + 6*a1**2 + (4*a0 - 9*a1)*a2 + 3*a2**2)*a3)*b3)*t1
    numer_coeffs = (ds_n4,ds_n3,ds_n2,ds_n1,ds_n0)
    ds_d0 = 12*(a1**2 - 2*a1*a2 + a2**2)*b0**2 - 24*(a0*a1 - (a0 + a1)*a2 + a2**2)*b0*b1 + 12*(a0**2 - 2*a0*a2 + a2**2)*b1**2 + 12*(a0**2 - 2*a0*a1 + a1**2)*b2**2 + 3*((4*a1**2 - 12*a1*a2 + 9*a2**2 + 2*(2*a1 - 3*a2)*a3 + a3**2)*b0**2 - 2*(4*a0*a1 - 6*(a0 + a1)*a2 + 9*a2**2 + 2*(a0 + a1 - 3*a2)*a3 + a3**2)*b0*b1 + (4*a0**2 - 12*a0*a2 + 9*a2**2 + 2*(2*a0 - 3*a2)*a3 + a3**2)*b1**2 + 9*(a0**2 - 2*a0*a1 + a1**2)*b2**2 + (a0**2 - 2*a0*a1 + a1**2)*b3**2 + 6*((2*a0*a1 - 2*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 - (2*a0**2 - 2*a0*a1 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1)*b2 - 2*((2*a0*a1 - 2*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 - (2*a0**2 - 2*a0*a1 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1 + 3*(a0**2 - 2*a0*a1 + a1**2)*b2)*b3)*t1**2 + 24*((a0*a1 - a1**2 - (a0 - a1)*a2)*b0 - (a0**2 - a0*a1 - (a0 - a1)*a2)*b1)*b2 - 12*((2*a1**2 - 5*a1*a2 + 3*a2**2 + (a1 - a2)*a3)*b0**2 - (4*a0*a1 - 5*(a0 + a1)*a2 + 6*a2**2 + (a0 + a1 - 2*a2)*a3)*b0*b1 + (2*a0**2 - 5*a0*a2 + 3*a2**2 + (a0 - a2)*a3)*b1**2 + 3*(a0**2 - 2*a0*a1 + a1**2)*b2**2 + ((5*a0*a1 - 5*a1**2 - 6*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 - (5*a0**2 - 5*a0*a1 - 6*(a0 - a1)*a2 + (a0 - a1)*a3)*b1)*b2 - ((a0*a1 - a1**2 - (a0 - a1)*a2)*b0 - (a0**2 - a0*a1 - (a0 - a1)*a2)*b1 + (a0**2 - 2*a0*a1 + a1**2)*b2)*b3)*t1
    ds_d1 = -12*(2*a1**2 - 5*a1*a2 + 3*a2**2 + (a1 - a2)*a3)*b0**2 + 12*(4*a0*a1 - 5*(a0 + a1)*a2 + 6*a2**2 + (a0 + a1 - 2*a2)*a3)*b0*b1 - 12*(2*a0**2 - 5*a0*a2 + 3*a2**2 + (a0 - a2)*a3)*b1**2 - 36*(a0**2 - 2*a0*a1 + a1**2)*b2**2 - 12*((2*a1**2 - 7*a1*a2 + 6*a2**2 + (3*a1 - 5*a2)*a3 + a3**2)*b0**2 - (4*a0*a1 - (7*a0 + 9*a1)*a2 + 15*a2**2 + (3*a0 + 5*a1 - 14*a2)*a3 + 3*a3**2)*b0*b1 + (2*a0**2 - 9*a0*a2 + 9*a2**2 + (5*a0 - 9*a2)*a3 + 2*a3**2)*b1**2 + 3*(2*a0**2 - 5*a0*a1 + 3*a1**2 + (a0 - a1)*a3)*b2**2 + (a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*b3**2 + ((7*a0*a1 - 9*a1**2 - 3*(4*a0 - 5*a1)*a2 + (5*a0 - 4*a1 - 3*a2)*a3 + a3**2)*b0 - (7*a0**2 - 9*a0*a1 - 3*(5*a0 - 6*a1)*a2 + (10*a0 - 9*a1 - 3*a2)*a3 + a3**2)*b1)*b2 - ((3*a0*a1 - 5*a1**2 - 5*(a0 - 2*a1)*a2 - 3*a2**2 + (2*a0 - 3*a1 + a2)*a3)*b0 - (3*a0**2 - 5*a0*a1 - (4*a0 - 9*a1)*a2 - 3*a2**2 + (3*a0 - 4*a1 + a2)*a3)*b1 + (5*a0**2 - 14*a0*a1 + 9*a1**2 + 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b2)*b3)*t1**2 - 12*((5*a0*a1 - 5*a1**2 - 6*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 - (5*a0**2 - 5*a0*a1 - 6*(a0 - a1)*a2 + (a0 - a1)*a3)*b1)*b2 + 12*((a0*a1 - a1**2 - (a0 - a1)*a2)*b0 - (a0**2 - a0*a1 - (a0 - a1)*a2)*b1 + (a0**2 - 2*a0*a1 + a1**2)*b2)*b3 + 6*((8*a1**2 - 24*a1*a2 + 17*a2**2 + 2*(4*a1 - 5*a2)*a3 + a3**2)*b0**2 - 2*(8*a0*a1 - 2*(6*a0 + 7*a1)*a2 + 19*a2**2 + 2*(2*a0 + 3*a1 - 6*a2)*a3 + a3**2)*b0*b1 + (8*a0**2 - 28*a0*a2 + 21*a2**2 + 2*(6*a0 - 7*a2)*a3 + a3**2)*b1**2 + (17*a0**2 - 38*a0*a1 + 21*a1**2 + 4*(a0 - a1)*a3)*b2**2 + (a0**2 - 2*a0*a1 + a1**2)*b3**2 + 2*((12*a0*a1 - 14*a1**2 - (17*a0 - 19*a1)*a2 + (5*a0 - 3*a1 - 2*a2)*a3)*b0 - (12*a0**2 - 14*a0*a1 - (19*a0 - 21*a1)*a2 + (9*a0 - 7*a1 - 2*a2)*a3)*b1)*b2 - 2*((4*a0*a1 - 6*a1**2 - (5*a0 - 9*a1)*a2 - 2*a2**2 + (a0 - a1)*a3)*b0 - (4*a0**2 - 6*a0*a1 - (3*a0 - 7*a1)*a2 - 2*a2**2 + (a0 - a1)*a3)*b1 + (5*a0**2 - 12*a0*a1 + 7*a1**2 + 2*(a0 - a1)*a2)*b2)*b3)*t1
    ds_d2 = 3*(4*a1**2 - 12*a1*a2 + 9*a2**2 + 2*(2*a1 - 3*a2)*a3 + a3**2)*b0**2 - 6*(4*a0*a1 - 6*(a0 + a1)*a2 + 9*a2**2 + 2*(a0 + a1 - 3*a2)*a3 + a3**2)*b0*b1 + 3*(4*a0**2 - 12*a0*a2 + 9*a2**2 + 2*(2*a0 - 3*a2)*a3 + a3**2)*b1**2 + 27*(a0**2 - 2*a0*a1 + a1**2)*b2**2 + 3*(a0**2 - 2*a0*a1 + a1**2)*b3**2 + 12*((a1**2 - 4*a1*a2 + 4*a2**2 + 2*(a1 - 2*a2)*a3 + a3**2)*b0**2 - 2*(a0*a1 - (2*a0 + 3*a1)*a2 + 6*a2**2 + (a0 + 2*a1 - 7*a2)*a3 + 2*a3**2)*b0*b1 + (a0**2 - 6*a0*a2 + 9*a2**2 + 4*(a0 - 3*a2)*a3 + 4*a3**2)*b1**2 + (4*a0**2 - 12*a0*a1 + 9*a1**2 + 2*(2*a0 - 3*a1)*a3 + a3**2)*b2**2 + (a0**2 - 4*a0*a1 + 4*a1**2 + 2*(a0 - 2*a1)*a2 + a2**2)*b3**2 + 2*((2*a0*a1 - 3*a1**2 - 2*(2*a0 - 3*a1)*a2 + 2*(a0 - a1 - a2)*a3 + a3**2)*b0 - (2*a0**2 - 3*a0*a1 - 3*(2*a0 - 3*a1)*a2 + (5*a0 - 6*a1 - 3*a2)*a3 + 2*a3**2)*b1)*b2 - 2*((a0*a1 - 2*a1**2 - (2*a0 - 5*a1)*a2 - 2*a2**2 + (a0 - 2*a1 + a2)*a3)*b0 - (a0**2 - 2*a0*a1 - 2*(a0 - 3*a1)*a2 - 3*a2**2 + 2*(a0 - 2*a1 + a2)*a3)*b1 + (2*a0**2 - 7*a0*a1 + 6*a1**2 + (2*a0 - 3*a1)*a2 + (a0 - 2*a1 + a2)*a3)*b2)*b3)*t1**2 + 18*((2*a0*a1 - 2*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 - (2*a0**2 - 2*a0*a1 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1)*b2 - 6*((2*a0*a1 - 2*a1**2 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b0 - (2*a0**2 - 2*a0*a1 - 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b1 + 3*(a0**2 - 2*a0*a1 + a1**2)*b2)*b3 - 12*((2*a1**2 - 7*a1*a2 + 6*a2**2 + (3*a1 - 5*a2)*a3 + a3**2)*b0**2 - (4*a0*a1 - (7*a0 + 9*a1)*a2 + 15*a2**2 + (3*a0 + 5*a1 - 14*a2)*a3 + 3*a3**2)*b0*b1 + (2*a0**2 - 9*a0*a2 + 9*a2**2 + (5*a0 - 9*a2)*a3 + 2*a3**2)*b1**2 + 3*(2*a0**2 - 5*a0*a1 + 3*a1**2 + (a0 - a1)*a3)*b2**2 + (a0**2 - 3*a0*a1 + 2*a1**2 + (a0 - a1)*a2)*b3**2 + ((7*a0*a1 - 9*a1**2 - 3*(4*a0 - 5*a1)*a2 + (5*a0 - 4*a1 - 3*a2)*a3 + a3**2)*b0 - (7*a0**2 - 9*a0*a1 - 3*(5*a0 - 6*a1)*a2 + (10*a0 - 9*a1 - 3*a2)*a3 + a3**2)*b1)*b2 - ((3*a0*a1 - 5*a1**2 - 5*(a0 - 2*a1)*a2 - 3*a2**2 + (2*a0 - 3*a1 + a2)*a3)*b0 - (3*a0**2 - 5*a0*a1 - (4*a0 - 9*a1)*a2 - 3*a2**2 + (3*a0 - 4*a1 + a2)*a3)*b1 + (5*a0**2 - 14*a0*a1 + 9*a1**2 + 3*(a0 - a1)*a2 + (a0 - a1)*a3)*b2)*b3)*t1
    denom_coeffs = (ds_n2,ds_n1,ds_n0)

    #Find zeros
    numer_roots = roots(numer_coeffs)
    denom_roots = roots(denom_coeffs)

    #get rid of duplicates, non-real, and out-of-bounds t-vals
    extremizers = set([t.real for t in numer_roots if 0<=t<=1 and isclose(t.imag,0)])
    undef_pts = set([t.real for t in denom_roots if 0<=t<=1 and isclose(t.imag,0)])
    #get rid of t-vals where rational fcn is undefined  ###TOL using numpy.isclose()
    for t_denom in undef_pts:
        for t_numer in extremizers:
            if isclose(t_numer,t_denom):
                extremizers.remove(t_numer)

    #Make list of extrema corresponding to extremizers  ###TOL using numpy.isclose()
    s = s_func(t1,a0,a1,a2,a3,b0,b1,b2,b3)
    extrema = [(t,s.eval(t)) for t in extremizers]
    extrema = [(t,s_val.real) for (t,s_val) in extrema if (s_val!=False and isclose(s_val.imag,0) and s_val.real>=0)]

    #Find global extrema over interval [0,1]
    if extrema:
        minimum = min(extrema,key=itemgetter(1))
        if minimum[1]==0:
            raise Exception("The minimum s found is zero.  This may mean there's a problem with my math.")
    else:
        minimum = (False,False)
    return minimum
def find_boundary_curve(cub,outer_path,endBin,center):
    (normal_Line,outer_seg,outer_t) = normalLineAtT_toInner_intersects_withOuter(endBin,Path(cub),outer_path,center)
    a0,a1,a2,a3 = cub.start.real, cub.control1.real, cub.control2.real, cub.end.real
    b0,b1,b2,b3 = cub.start.imag, cub.control1.imag, cub.control2.imag, cub.end.imag
    t1=endBin
    if endBin:
        n_e = -3*b0 + 3*b1 + (3*a0 - 3*a1)*1j
    else:
        n_e = -3*b2 + 3*b3 + (3.0*a2 - 3.0*a3)*1j
    n = lambda t :(3*1j*a0 - 9*1j*a1 + 9*1j*a2 - 3*1j*a3 - 3*b0 + 9*b1 - 9*b2 + 3*b3)*t**2 + (-6*1j*a0 + 12*1j*a1 - 6*1j*a2 + 6*b0 - 12*b1 + 6*b2)*t + 3*1j*a0 - 3*1j*a1 - 3*b0 + 3*b1
    nL = lambda s,t: s*n(t)+cub.point(t)
    s1=(normal_Line.end - cub.point(endBin))/n_e #s_val where outward normal ray at endBin meets outer_path
    joints=[(t1,normal_Line.end)]
    maxIts = 100; its=1
    while its<maxIts:
        (tstar,s_val) = argmin_of_s(t1,a0,a1,a2,a3,b0,b1,b2,b3)
        if s_val and s_val<s1:
            joints.append((tstar,nL(s_val,tstar)))
            s1 = tau_eval(tstar,t1,a0,a1,a2,a3,b0,b1,b2,b3)
            t1 = tstar
            its+=1
            continue
        else:
            break
    if its>=maxIts:
        raise Exception("Maxiumum iterations reached.")



